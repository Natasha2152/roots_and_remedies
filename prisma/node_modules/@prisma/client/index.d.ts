
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model aromatherapy
 * 
 */
export type aromatherapy = $Result.DefaultSelection<Prisma.$aromatherapyPayload>
/**
 * Model herbalmedicine
 * 
 */
export type herbalmedicine = $Result.DefaultSelection<Prisma.$herbalmedicinePayload>
/**
 * Model traditionalhealing
 * 
 */
export type traditionalhealing = $Result.DefaultSelection<Prisma.$traditionalhealingPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Aromatherapies
 * const aromatherapies = await prisma.aromatherapy.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Aromatherapies
   * const aromatherapies = await prisma.aromatherapy.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.aromatherapy`: Exposes CRUD operations for the **aromatherapy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aromatherapies
    * const aromatherapies = await prisma.aromatherapy.findMany()
    * ```
    */
  get aromatherapy(): Prisma.aromatherapyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.herbalmedicine`: Exposes CRUD operations for the **herbalmedicine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Herbalmedicines
    * const herbalmedicines = await prisma.herbalmedicine.findMany()
    * ```
    */
  get herbalmedicine(): Prisma.herbalmedicineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.traditionalhealing`: Exposes CRUD operations for the **traditionalhealing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Traditionalhealings
    * const traditionalhealings = await prisma.traditionalhealing.findMany()
    * ```
    */
  get traditionalhealing(): Prisma.traditionalhealingDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    aromatherapy: 'aromatherapy',
    herbalmedicine: 'herbalmedicine',
    traditionalhealing: 'traditionalhealing'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "aromatherapy" | "herbalmedicine" | "traditionalhealing"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      aromatherapy: {
        payload: Prisma.$aromatherapyPayload<ExtArgs>
        fields: Prisma.aromatherapyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.aromatherapyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.aromatherapyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>
          }
          findFirst: {
            args: Prisma.aromatherapyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.aromatherapyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>
          }
          findMany: {
            args: Prisma.aromatherapyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>[]
          }
          create: {
            args: Prisma.aromatherapyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>
          }
          createMany: {
            args: Prisma.aromatherapyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.aromatherapyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>
          }
          update: {
            args: Prisma.aromatherapyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>
          }
          deleteMany: {
            args: Prisma.aromatherapyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.aromatherapyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.aromatherapyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aromatherapyPayload>
          }
          aggregate: {
            args: Prisma.AromatherapyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAromatherapy>
          }
          groupBy: {
            args: Prisma.aromatherapyGroupByArgs<ExtArgs>
            result: $Utils.Optional<AromatherapyGroupByOutputType>[]
          }
          count: {
            args: Prisma.aromatherapyCountArgs<ExtArgs>
            result: $Utils.Optional<AromatherapyCountAggregateOutputType> | number
          }
        }
      }
      herbalmedicine: {
        payload: Prisma.$herbalmedicinePayload<ExtArgs>
        fields: Prisma.herbalmedicineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.herbalmedicineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.herbalmedicineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>
          }
          findFirst: {
            args: Prisma.herbalmedicineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.herbalmedicineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>
          }
          findMany: {
            args: Prisma.herbalmedicineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>[]
          }
          create: {
            args: Prisma.herbalmedicineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>
          }
          createMany: {
            args: Prisma.herbalmedicineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.herbalmedicineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>
          }
          update: {
            args: Prisma.herbalmedicineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>
          }
          deleteMany: {
            args: Prisma.herbalmedicineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.herbalmedicineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.herbalmedicineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$herbalmedicinePayload>
          }
          aggregate: {
            args: Prisma.HerbalmedicineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHerbalmedicine>
          }
          groupBy: {
            args: Prisma.herbalmedicineGroupByArgs<ExtArgs>
            result: $Utils.Optional<HerbalmedicineGroupByOutputType>[]
          }
          count: {
            args: Prisma.herbalmedicineCountArgs<ExtArgs>
            result: $Utils.Optional<HerbalmedicineCountAggregateOutputType> | number
          }
        }
      }
      traditionalhealing: {
        payload: Prisma.$traditionalhealingPayload<ExtArgs>
        fields: Prisma.traditionalhealingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.traditionalhealingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.traditionalhealingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>
          }
          findFirst: {
            args: Prisma.traditionalhealingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.traditionalhealingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>
          }
          findMany: {
            args: Prisma.traditionalhealingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>[]
          }
          create: {
            args: Prisma.traditionalhealingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>
          }
          createMany: {
            args: Prisma.traditionalhealingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.traditionalhealingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>
          }
          update: {
            args: Prisma.traditionalhealingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>
          }
          deleteMany: {
            args: Prisma.traditionalhealingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.traditionalhealingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.traditionalhealingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$traditionalhealingPayload>
          }
          aggregate: {
            args: Prisma.TraditionalhealingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTraditionalhealing>
          }
          groupBy: {
            args: Prisma.traditionalhealingGroupByArgs<ExtArgs>
            result: $Utils.Optional<TraditionalhealingGroupByOutputType>[]
          }
          count: {
            args: Prisma.traditionalhealingCountArgs<ExtArgs>
            result: $Utils.Optional<TraditionalhealingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    aromatherapy?: aromatherapyOmit
    herbalmedicine?: herbalmedicineOmit
    traditionalhealing?: traditionalhealingOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model aromatherapy
   */

  export type AggregateAromatherapy = {
    _count: AromatherapyCountAggregateOutputType | null
    _avg: AromatherapyAvgAggregateOutputType | null
    _sum: AromatherapySumAggregateOutputType | null
    _min: AromatherapyMinAggregateOutputType | null
    _max: AromatherapyMaxAggregateOutputType | null
  }

  export type AromatherapyAvgAggregateOutputType = {
    id: number | null
    likes: number | null
    rating: number | null
  }

  export type AromatherapySumAggregateOutputType = {
    id: number | null
    likes: number | null
    rating: number | null
  }

  export type AromatherapyMinAggregateOutputType = {
    id: number | null
    name: string | null
    essentialOil: string | null
    uses: string | null
    createdAt: Date | null
    updatedAt: Date | null
    benefits: string | null
    category: string | null
    description: string | null
    imageUrl: string | null
    likes: number | null
    origin: string | null
    rating: number | null
    symptoms: string | null
    tags: string | null
    usageIdeas: string | null
  }

  export type AromatherapyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    essentialOil: string | null
    uses: string | null
    createdAt: Date | null
    updatedAt: Date | null
    benefits: string | null
    category: string | null
    description: string | null
    imageUrl: string | null
    likes: number | null
    origin: string | null
    rating: number | null
    symptoms: string | null
    tags: string | null
    usageIdeas: string | null
  }

  export type AromatherapyCountAggregateOutputType = {
    id: number
    name: number
    essentialOil: number
    uses: number
    createdAt: number
    updatedAt: number
    benefits: number
    category: number
    description: number
    imageUrl: number
    likes: number
    origin: number
    rating: number
    symptoms: number
    tags: number
    usageIdeas: number
    _all: number
  }


  export type AromatherapyAvgAggregateInputType = {
    id?: true
    likes?: true
    rating?: true
  }

  export type AromatherapySumAggregateInputType = {
    id?: true
    likes?: true
    rating?: true
  }

  export type AromatherapyMinAggregateInputType = {
    id?: true
    name?: true
    essentialOil?: true
    uses?: true
    createdAt?: true
    updatedAt?: true
    benefits?: true
    category?: true
    description?: true
    imageUrl?: true
    likes?: true
    origin?: true
    rating?: true
    symptoms?: true
    tags?: true
    usageIdeas?: true
  }

  export type AromatherapyMaxAggregateInputType = {
    id?: true
    name?: true
    essentialOil?: true
    uses?: true
    createdAt?: true
    updatedAt?: true
    benefits?: true
    category?: true
    description?: true
    imageUrl?: true
    likes?: true
    origin?: true
    rating?: true
    symptoms?: true
    tags?: true
    usageIdeas?: true
  }

  export type AromatherapyCountAggregateInputType = {
    id?: true
    name?: true
    essentialOil?: true
    uses?: true
    createdAt?: true
    updatedAt?: true
    benefits?: true
    category?: true
    description?: true
    imageUrl?: true
    likes?: true
    origin?: true
    rating?: true
    symptoms?: true
    tags?: true
    usageIdeas?: true
    _all?: true
  }

  export type AromatherapyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aromatherapy to aggregate.
     */
    where?: aromatherapyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aromatherapies to fetch.
     */
    orderBy?: aromatherapyOrderByWithRelationInput | aromatherapyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: aromatherapyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aromatherapies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aromatherapies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned aromatherapies
    **/
    _count?: true | AromatherapyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AromatherapyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AromatherapySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AromatherapyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AromatherapyMaxAggregateInputType
  }

  export type GetAromatherapyAggregateType<T extends AromatherapyAggregateArgs> = {
        [P in keyof T & keyof AggregateAromatherapy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAromatherapy[P]>
      : GetScalarType<T[P], AggregateAromatherapy[P]>
  }




  export type aromatherapyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aromatherapyWhereInput
    orderBy?: aromatherapyOrderByWithAggregationInput | aromatherapyOrderByWithAggregationInput[]
    by: AromatherapyScalarFieldEnum[] | AromatherapyScalarFieldEnum
    having?: aromatherapyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AromatherapyCountAggregateInputType | true
    _avg?: AromatherapyAvgAggregateInputType
    _sum?: AromatherapySumAggregateInputType
    _min?: AromatherapyMinAggregateInputType
    _max?: AromatherapyMaxAggregateInputType
  }

  export type AromatherapyGroupByOutputType = {
    id: number
    name: string
    essentialOil: string
    uses: string
    createdAt: Date
    updatedAt: Date
    benefits: string
    category: string
    description: string
    imageUrl: string
    likes: number
    origin: string
    rating: number | null
    symptoms: string
    tags: string
    usageIdeas: string
    _count: AromatherapyCountAggregateOutputType | null
    _avg: AromatherapyAvgAggregateOutputType | null
    _sum: AromatherapySumAggregateOutputType | null
    _min: AromatherapyMinAggregateOutputType | null
    _max: AromatherapyMaxAggregateOutputType | null
  }

  type GetAromatherapyGroupByPayload<T extends aromatherapyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AromatherapyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AromatherapyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AromatherapyGroupByOutputType[P]>
            : GetScalarType<T[P], AromatherapyGroupByOutputType[P]>
        }
      >
    >


  export type aromatherapySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    essentialOil?: boolean
    uses?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    benefits?: boolean
    category?: boolean
    description?: boolean
    imageUrl?: boolean
    likes?: boolean
    origin?: boolean
    rating?: boolean
    symptoms?: boolean
    tags?: boolean
    usageIdeas?: boolean
  }, ExtArgs["result"]["aromatherapy"]>



  export type aromatherapySelectScalar = {
    id?: boolean
    name?: boolean
    essentialOil?: boolean
    uses?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    benefits?: boolean
    category?: boolean
    description?: boolean
    imageUrl?: boolean
    likes?: boolean
    origin?: boolean
    rating?: boolean
    symptoms?: boolean
    tags?: boolean
    usageIdeas?: boolean
  }

  export type aromatherapyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "essentialOil" | "uses" | "createdAt" | "updatedAt" | "benefits" | "category" | "description" | "imageUrl" | "likes" | "origin" | "rating" | "symptoms" | "tags" | "usageIdeas", ExtArgs["result"]["aromatherapy"]>

  export type $aromatherapyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "aromatherapy"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      essentialOil: string
      uses: string
      createdAt: Date
      updatedAt: Date
      benefits: string
      category: string
      description: string
      imageUrl: string
      likes: number
      origin: string
      rating: number | null
      symptoms: string
      tags: string
      usageIdeas: string
    }, ExtArgs["result"]["aromatherapy"]>
    composites: {}
  }

  type aromatherapyGetPayload<S extends boolean | null | undefined | aromatherapyDefaultArgs> = $Result.GetResult<Prisma.$aromatherapyPayload, S>

  type aromatherapyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<aromatherapyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AromatherapyCountAggregateInputType | true
    }

  export interface aromatherapyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['aromatherapy'], meta: { name: 'aromatherapy' } }
    /**
     * Find zero or one Aromatherapy that matches the filter.
     * @param {aromatherapyFindUniqueArgs} args - Arguments to find a Aromatherapy
     * @example
     * // Get one Aromatherapy
     * const aromatherapy = await prisma.aromatherapy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends aromatherapyFindUniqueArgs>(args: SelectSubset<T, aromatherapyFindUniqueArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Aromatherapy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {aromatherapyFindUniqueOrThrowArgs} args - Arguments to find a Aromatherapy
     * @example
     * // Get one Aromatherapy
     * const aromatherapy = await prisma.aromatherapy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends aromatherapyFindUniqueOrThrowArgs>(args: SelectSubset<T, aromatherapyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aromatherapy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aromatherapyFindFirstArgs} args - Arguments to find a Aromatherapy
     * @example
     * // Get one Aromatherapy
     * const aromatherapy = await prisma.aromatherapy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends aromatherapyFindFirstArgs>(args?: SelectSubset<T, aromatherapyFindFirstArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aromatherapy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aromatherapyFindFirstOrThrowArgs} args - Arguments to find a Aromatherapy
     * @example
     * // Get one Aromatherapy
     * const aromatherapy = await prisma.aromatherapy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends aromatherapyFindFirstOrThrowArgs>(args?: SelectSubset<T, aromatherapyFindFirstOrThrowArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Aromatherapies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aromatherapyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aromatherapies
     * const aromatherapies = await prisma.aromatherapy.findMany()
     * 
     * // Get first 10 Aromatherapies
     * const aromatherapies = await prisma.aromatherapy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aromatherapyWithIdOnly = await prisma.aromatherapy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends aromatherapyFindManyArgs>(args?: SelectSubset<T, aromatherapyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Aromatherapy.
     * @param {aromatherapyCreateArgs} args - Arguments to create a Aromatherapy.
     * @example
     * // Create one Aromatherapy
     * const Aromatherapy = await prisma.aromatherapy.create({
     *   data: {
     *     // ... data to create a Aromatherapy
     *   }
     * })
     * 
     */
    create<T extends aromatherapyCreateArgs>(args: SelectSubset<T, aromatherapyCreateArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Aromatherapies.
     * @param {aromatherapyCreateManyArgs} args - Arguments to create many Aromatherapies.
     * @example
     * // Create many Aromatherapies
     * const aromatherapy = await prisma.aromatherapy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends aromatherapyCreateManyArgs>(args?: SelectSubset<T, aromatherapyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aromatherapy.
     * @param {aromatherapyDeleteArgs} args - Arguments to delete one Aromatherapy.
     * @example
     * // Delete one Aromatherapy
     * const Aromatherapy = await prisma.aromatherapy.delete({
     *   where: {
     *     // ... filter to delete one Aromatherapy
     *   }
     * })
     * 
     */
    delete<T extends aromatherapyDeleteArgs>(args: SelectSubset<T, aromatherapyDeleteArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Aromatherapy.
     * @param {aromatherapyUpdateArgs} args - Arguments to update one Aromatherapy.
     * @example
     * // Update one Aromatherapy
     * const aromatherapy = await prisma.aromatherapy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends aromatherapyUpdateArgs>(args: SelectSubset<T, aromatherapyUpdateArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Aromatherapies.
     * @param {aromatherapyDeleteManyArgs} args - Arguments to filter Aromatherapies to delete.
     * @example
     * // Delete a few Aromatherapies
     * const { count } = await prisma.aromatherapy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends aromatherapyDeleteManyArgs>(args?: SelectSubset<T, aromatherapyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aromatherapies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aromatherapyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aromatherapies
     * const aromatherapy = await prisma.aromatherapy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends aromatherapyUpdateManyArgs>(args: SelectSubset<T, aromatherapyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aromatherapy.
     * @param {aromatherapyUpsertArgs} args - Arguments to update or create a Aromatherapy.
     * @example
     * // Update or create a Aromatherapy
     * const aromatherapy = await prisma.aromatherapy.upsert({
     *   create: {
     *     // ... data to create a Aromatherapy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aromatherapy we want to update
     *   }
     * })
     */
    upsert<T extends aromatherapyUpsertArgs>(args: SelectSubset<T, aromatherapyUpsertArgs<ExtArgs>>): Prisma__aromatherapyClient<$Result.GetResult<Prisma.$aromatherapyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Aromatherapies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aromatherapyCountArgs} args - Arguments to filter Aromatherapies to count.
     * @example
     * // Count the number of Aromatherapies
     * const count = await prisma.aromatherapy.count({
     *   where: {
     *     // ... the filter for the Aromatherapies we want to count
     *   }
     * })
    **/
    count<T extends aromatherapyCountArgs>(
      args?: Subset<T, aromatherapyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AromatherapyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aromatherapy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AromatherapyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AromatherapyAggregateArgs>(args: Subset<T, AromatherapyAggregateArgs>): Prisma.PrismaPromise<GetAromatherapyAggregateType<T>>

    /**
     * Group by Aromatherapy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aromatherapyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends aromatherapyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: aromatherapyGroupByArgs['orderBy'] }
        : { orderBy?: aromatherapyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, aromatherapyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAromatherapyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the aromatherapy model
   */
  readonly fields: aromatherapyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for aromatherapy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__aromatherapyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the aromatherapy model
   */
  interface aromatherapyFieldRefs {
    readonly id: FieldRef<"aromatherapy", 'Int'>
    readonly name: FieldRef<"aromatherapy", 'String'>
    readonly essentialOil: FieldRef<"aromatherapy", 'String'>
    readonly uses: FieldRef<"aromatherapy", 'String'>
    readonly createdAt: FieldRef<"aromatherapy", 'DateTime'>
    readonly updatedAt: FieldRef<"aromatherapy", 'DateTime'>
    readonly benefits: FieldRef<"aromatherapy", 'String'>
    readonly category: FieldRef<"aromatherapy", 'String'>
    readonly description: FieldRef<"aromatherapy", 'String'>
    readonly imageUrl: FieldRef<"aromatherapy", 'String'>
    readonly likes: FieldRef<"aromatherapy", 'Int'>
    readonly origin: FieldRef<"aromatherapy", 'String'>
    readonly rating: FieldRef<"aromatherapy", 'Float'>
    readonly symptoms: FieldRef<"aromatherapy", 'String'>
    readonly tags: FieldRef<"aromatherapy", 'String'>
    readonly usageIdeas: FieldRef<"aromatherapy", 'String'>
  }
    

  // Custom InputTypes
  /**
   * aromatherapy findUnique
   */
  export type aromatherapyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * Filter, which aromatherapy to fetch.
     */
    where: aromatherapyWhereUniqueInput
  }

  /**
   * aromatherapy findUniqueOrThrow
   */
  export type aromatherapyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * Filter, which aromatherapy to fetch.
     */
    where: aromatherapyWhereUniqueInput
  }

  /**
   * aromatherapy findFirst
   */
  export type aromatherapyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * Filter, which aromatherapy to fetch.
     */
    where?: aromatherapyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aromatherapies to fetch.
     */
    orderBy?: aromatherapyOrderByWithRelationInput | aromatherapyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aromatherapies.
     */
    cursor?: aromatherapyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aromatherapies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aromatherapies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aromatherapies.
     */
    distinct?: AromatherapyScalarFieldEnum | AromatherapyScalarFieldEnum[]
  }

  /**
   * aromatherapy findFirstOrThrow
   */
  export type aromatherapyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * Filter, which aromatherapy to fetch.
     */
    where?: aromatherapyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aromatherapies to fetch.
     */
    orderBy?: aromatherapyOrderByWithRelationInput | aromatherapyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aromatherapies.
     */
    cursor?: aromatherapyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aromatherapies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aromatherapies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aromatherapies.
     */
    distinct?: AromatherapyScalarFieldEnum | AromatherapyScalarFieldEnum[]
  }

  /**
   * aromatherapy findMany
   */
  export type aromatherapyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * Filter, which aromatherapies to fetch.
     */
    where?: aromatherapyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aromatherapies to fetch.
     */
    orderBy?: aromatherapyOrderByWithRelationInput | aromatherapyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing aromatherapies.
     */
    cursor?: aromatherapyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aromatherapies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aromatherapies.
     */
    skip?: number
    distinct?: AromatherapyScalarFieldEnum | AromatherapyScalarFieldEnum[]
  }

  /**
   * aromatherapy create
   */
  export type aromatherapyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * The data needed to create a aromatherapy.
     */
    data: XOR<aromatherapyCreateInput, aromatherapyUncheckedCreateInput>
  }

  /**
   * aromatherapy createMany
   */
  export type aromatherapyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many aromatherapies.
     */
    data: aromatherapyCreateManyInput | aromatherapyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aromatherapy update
   */
  export type aromatherapyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * The data needed to update a aromatherapy.
     */
    data: XOR<aromatherapyUpdateInput, aromatherapyUncheckedUpdateInput>
    /**
     * Choose, which aromatherapy to update.
     */
    where: aromatherapyWhereUniqueInput
  }

  /**
   * aromatherapy updateMany
   */
  export type aromatherapyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update aromatherapies.
     */
    data: XOR<aromatherapyUpdateManyMutationInput, aromatherapyUncheckedUpdateManyInput>
    /**
     * Filter which aromatherapies to update
     */
    where?: aromatherapyWhereInput
    /**
     * Limit how many aromatherapies to update.
     */
    limit?: number
  }

  /**
   * aromatherapy upsert
   */
  export type aromatherapyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * The filter to search for the aromatherapy to update in case it exists.
     */
    where: aromatherapyWhereUniqueInput
    /**
     * In case the aromatherapy found by the `where` argument doesn't exist, create a new aromatherapy with this data.
     */
    create: XOR<aromatherapyCreateInput, aromatherapyUncheckedCreateInput>
    /**
     * In case the aromatherapy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<aromatherapyUpdateInput, aromatherapyUncheckedUpdateInput>
  }

  /**
   * aromatherapy delete
   */
  export type aromatherapyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
    /**
     * Filter which aromatherapy to delete.
     */
    where: aromatherapyWhereUniqueInput
  }

  /**
   * aromatherapy deleteMany
   */
  export type aromatherapyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aromatherapies to delete
     */
    where?: aromatherapyWhereInput
    /**
     * Limit how many aromatherapies to delete.
     */
    limit?: number
  }

  /**
   * aromatherapy without action
   */
  export type aromatherapyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aromatherapy
     */
    select?: aromatherapySelect<ExtArgs> | null
    /**
     * Omit specific fields from the aromatherapy
     */
    omit?: aromatherapyOmit<ExtArgs> | null
  }


  /**
   * Model herbalmedicine
   */

  export type AggregateHerbalmedicine = {
    _count: HerbalmedicineCountAggregateOutputType | null
    _avg: HerbalmedicineAvgAggregateOutputType | null
    _sum: HerbalmedicineSumAggregateOutputType | null
    _min: HerbalmedicineMinAggregateOutputType | null
    _max: HerbalmedicineMaxAggregateOutputType | null
  }

  export type HerbalmedicineAvgAggregateOutputType = {
    id: number | null
    likes: number | null
    rating: number | null
  }

  export type HerbalmedicineSumAggregateOutputType = {
    id: number | null
    likes: number | null
    rating: number | null
  }

  export type HerbalmedicineMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    benefits: string | null
    origin: string | null
    createdAt: Date | null
    updatedAt: Date | null
    category: string | null
    imageUrl: string | null
    likes: number | null
    rating: number | null
    symptoms: string | null
    tags: string | null
    usageIdeas: string | null
  }

  export type HerbalmedicineMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    benefits: string | null
    origin: string | null
    createdAt: Date | null
    updatedAt: Date | null
    category: string | null
    imageUrl: string | null
    likes: number | null
    rating: number | null
    symptoms: string | null
    tags: string | null
    usageIdeas: string | null
  }

  export type HerbalmedicineCountAggregateOutputType = {
    id: number
    name: number
    description: number
    benefits: number
    origin: number
    createdAt: number
    updatedAt: number
    category: number
    imageUrl: number
    likes: number
    rating: number
    symptoms: number
    tags: number
    usageIdeas: number
    _all: number
  }


  export type HerbalmedicineAvgAggregateInputType = {
    id?: true
    likes?: true
    rating?: true
  }

  export type HerbalmedicineSumAggregateInputType = {
    id?: true
    likes?: true
    rating?: true
  }

  export type HerbalmedicineMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    benefits?: true
    origin?: true
    createdAt?: true
    updatedAt?: true
    category?: true
    imageUrl?: true
    likes?: true
    rating?: true
    symptoms?: true
    tags?: true
    usageIdeas?: true
  }

  export type HerbalmedicineMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    benefits?: true
    origin?: true
    createdAt?: true
    updatedAt?: true
    category?: true
    imageUrl?: true
    likes?: true
    rating?: true
    symptoms?: true
    tags?: true
    usageIdeas?: true
  }

  export type HerbalmedicineCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    benefits?: true
    origin?: true
    createdAt?: true
    updatedAt?: true
    category?: true
    imageUrl?: true
    likes?: true
    rating?: true
    symptoms?: true
    tags?: true
    usageIdeas?: true
    _all?: true
  }

  export type HerbalmedicineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which herbalmedicine to aggregate.
     */
    where?: herbalmedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of herbalmedicines to fetch.
     */
    orderBy?: herbalmedicineOrderByWithRelationInput | herbalmedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: herbalmedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` herbalmedicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` herbalmedicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned herbalmedicines
    **/
    _count?: true | HerbalmedicineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HerbalmedicineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HerbalmedicineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HerbalmedicineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HerbalmedicineMaxAggregateInputType
  }

  export type GetHerbalmedicineAggregateType<T extends HerbalmedicineAggregateArgs> = {
        [P in keyof T & keyof AggregateHerbalmedicine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHerbalmedicine[P]>
      : GetScalarType<T[P], AggregateHerbalmedicine[P]>
  }




  export type herbalmedicineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: herbalmedicineWhereInput
    orderBy?: herbalmedicineOrderByWithAggregationInput | herbalmedicineOrderByWithAggregationInput[]
    by: HerbalmedicineScalarFieldEnum[] | HerbalmedicineScalarFieldEnum
    having?: herbalmedicineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HerbalmedicineCountAggregateInputType | true
    _avg?: HerbalmedicineAvgAggregateInputType
    _sum?: HerbalmedicineSumAggregateInputType
    _min?: HerbalmedicineMinAggregateInputType
    _max?: HerbalmedicineMaxAggregateInputType
  }

  export type HerbalmedicineGroupByOutputType = {
    id: number
    name: string
    description: string
    benefits: string
    origin: string
    createdAt: Date
    updatedAt: Date
    category: string
    imageUrl: string
    likes: number
    rating: number | null
    symptoms: string
    tags: string
    usageIdeas: string
    _count: HerbalmedicineCountAggregateOutputType | null
    _avg: HerbalmedicineAvgAggregateOutputType | null
    _sum: HerbalmedicineSumAggregateOutputType | null
    _min: HerbalmedicineMinAggregateOutputType | null
    _max: HerbalmedicineMaxAggregateOutputType | null
  }

  type GetHerbalmedicineGroupByPayload<T extends herbalmedicineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HerbalmedicineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HerbalmedicineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HerbalmedicineGroupByOutputType[P]>
            : GetScalarType<T[P], HerbalmedicineGroupByOutputType[P]>
        }
      >
    >


  export type herbalmedicineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    benefits?: boolean
    origin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean
    imageUrl?: boolean
    likes?: boolean
    rating?: boolean
    symptoms?: boolean
    tags?: boolean
    usageIdeas?: boolean
  }, ExtArgs["result"]["herbalmedicine"]>



  export type herbalmedicineSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    benefits?: boolean
    origin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean
    imageUrl?: boolean
    likes?: boolean
    rating?: boolean
    symptoms?: boolean
    tags?: boolean
    usageIdeas?: boolean
  }

  export type herbalmedicineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "benefits" | "origin" | "createdAt" | "updatedAt" | "category" | "imageUrl" | "likes" | "rating" | "symptoms" | "tags" | "usageIdeas", ExtArgs["result"]["herbalmedicine"]>

  export type $herbalmedicinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "herbalmedicine"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      benefits: string
      origin: string
      createdAt: Date
      updatedAt: Date
      category: string
      imageUrl: string
      likes: number
      rating: number | null
      symptoms: string
      tags: string
      usageIdeas: string
    }, ExtArgs["result"]["herbalmedicine"]>
    composites: {}
  }

  type herbalmedicineGetPayload<S extends boolean | null | undefined | herbalmedicineDefaultArgs> = $Result.GetResult<Prisma.$herbalmedicinePayload, S>

  type herbalmedicineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<herbalmedicineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HerbalmedicineCountAggregateInputType | true
    }

  export interface herbalmedicineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['herbalmedicine'], meta: { name: 'herbalmedicine' } }
    /**
     * Find zero or one Herbalmedicine that matches the filter.
     * @param {herbalmedicineFindUniqueArgs} args - Arguments to find a Herbalmedicine
     * @example
     * // Get one Herbalmedicine
     * const herbalmedicine = await prisma.herbalmedicine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends herbalmedicineFindUniqueArgs>(args: SelectSubset<T, herbalmedicineFindUniqueArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Herbalmedicine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {herbalmedicineFindUniqueOrThrowArgs} args - Arguments to find a Herbalmedicine
     * @example
     * // Get one Herbalmedicine
     * const herbalmedicine = await prisma.herbalmedicine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends herbalmedicineFindUniqueOrThrowArgs>(args: SelectSubset<T, herbalmedicineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Herbalmedicine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {herbalmedicineFindFirstArgs} args - Arguments to find a Herbalmedicine
     * @example
     * // Get one Herbalmedicine
     * const herbalmedicine = await prisma.herbalmedicine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends herbalmedicineFindFirstArgs>(args?: SelectSubset<T, herbalmedicineFindFirstArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Herbalmedicine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {herbalmedicineFindFirstOrThrowArgs} args - Arguments to find a Herbalmedicine
     * @example
     * // Get one Herbalmedicine
     * const herbalmedicine = await prisma.herbalmedicine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends herbalmedicineFindFirstOrThrowArgs>(args?: SelectSubset<T, herbalmedicineFindFirstOrThrowArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Herbalmedicines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {herbalmedicineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Herbalmedicines
     * const herbalmedicines = await prisma.herbalmedicine.findMany()
     * 
     * // Get first 10 Herbalmedicines
     * const herbalmedicines = await prisma.herbalmedicine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const herbalmedicineWithIdOnly = await prisma.herbalmedicine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends herbalmedicineFindManyArgs>(args?: SelectSubset<T, herbalmedicineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Herbalmedicine.
     * @param {herbalmedicineCreateArgs} args - Arguments to create a Herbalmedicine.
     * @example
     * // Create one Herbalmedicine
     * const Herbalmedicine = await prisma.herbalmedicine.create({
     *   data: {
     *     // ... data to create a Herbalmedicine
     *   }
     * })
     * 
     */
    create<T extends herbalmedicineCreateArgs>(args: SelectSubset<T, herbalmedicineCreateArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Herbalmedicines.
     * @param {herbalmedicineCreateManyArgs} args - Arguments to create many Herbalmedicines.
     * @example
     * // Create many Herbalmedicines
     * const herbalmedicine = await prisma.herbalmedicine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends herbalmedicineCreateManyArgs>(args?: SelectSubset<T, herbalmedicineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Herbalmedicine.
     * @param {herbalmedicineDeleteArgs} args - Arguments to delete one Herbalmedicine.
     * @example
     * // Delete one Herbalmedicine
     * const Herbalmedicine = await prisma.herbalmedicine.delete({
     *   where: {
     *     // ... filter to delete one Herbalmedicine
     *   }
     * })
     * 
     */
    delete<T extends herbalmedicineDeleteArgs>(args: SelectSubset<T, herbalmedicineDeleteArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Herbalmedicine.
     * @param {herbalmedicineUpdateArgs} args - Arguments to update one Herbalmedicine.
     * @example
     * // Update one Herbalmedicine
     * const herbalmedicine = await prisma.herbalmedicine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends herbalmedicineUpdateArgs>(args: SelectSubset<T, herbalmedicineUpdateArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Herbalmedicines.
     * @param {herbalmedicineDeleteManyArgs} args - Arguments to filter Herbalmedicines to delete.
     * @example
     * // Delete a few Herbalmedicines
     * const { count } = await prisma.herbalmedicine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends herbalmedicineDeleteManyArgs>(args?: SelectSubset<T, herbalmedicineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Herbalmedicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {herbalmedicineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Herbalmedicines
     * const herbalmedicine = await prisma.herbalmedicine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends herbalmedicineUpdateManyArgs>(args: SelectSubset<T, herbalmedicineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Herbalmedicine.
     * @param {herbalmedicineUpsertArgs} args - Arguments to update or create a Herbalmedicine.
     * @example
     * // Update or create a Herbalmedicine
     * const herbalmedicine = await prisma.herbalmedicine.upsert({
     *   create: {
     *     // ... data to create a Herbalmedicine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Herbalmedicine we want to update
     *   }
     * })
     */
    upsert<T extends herbalmedicineUpsertArgs>(args: SelectSubset<T, herbalmedicineUpsertArgs<ExtArgs>>): Prisma__herbalmedicineClient<$Result.GetResult<Prisma.$herbalmedicinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Herbalmedicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {herbalmedicineCountArgs} args - Arguments to filter Herbalmedicines to count.
     * @example
     * // Count the number of Herbalmedicines
     * const count = await prisma.herbalmedicine.count({
     *   where: {
     *     // ... the filter for the Herbalmedicines we want to count
     *   }
     * })
    **/
    count<T extends herbalmedicineCountArgs>(
      args?: Subset<T, herbalmedicineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HerbalmedicineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Herbalmedicine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HerbalmedicineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HerbalmedicineAggregateArgs>(args: Subset<T, HerbalmedicineAggregateArgs>): Prisma.PrismaPromise<GetHerbalmedicineAggregateType<T>>

    /**
     * Group by Herbalmedicine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {herbalmedicineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends herbalmedicineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: herbalmedicineGroupByArgs['orderBy'] }
        : { orderBy?: herbalmedicineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, herbalmedicineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHerbalmedicineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the herbalmedicine model
   */
  readonly fields: herbalmedicineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for herbalmedicine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__herbalmedicineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the herbalmedicine model
   */
  interface herbalmedicineFieldRefs {
    readonly id: FieldRef<"herbalmedicine", 'Int'>
    readonly name: FieldRef<"herbalmedicine", 'String'>
    readonly description: FieldRef<"herbalmedicine", 'String'>
    readonly benefits: FieldRef<"herbalmedicine", 'String'>
    readonly origin: FieldRef<"herbalmedicine", 'String'>
    readonly createdAt: FieldRef<"herbalmedicine", 'DateTime'>
    readonly updatedAt: FieldRef<"herbalmedicine", 'DateTime'>
    readonly category: FieldRef<"herbalmedicine", 'String'>
    readonly imageUrl: FieldRef<"herbalmedicine", 'String'>
    readonly likes: FieldRef<"herbalmedicine", 'Int'>
    readonly rating: FieldRef<"herbalmedicine", 'Float'>
    readonly symptoms: FieldRef<"herbalmedicine", 'String'>
    readonly tags: FieldRef<"herbalmedicine", 'String'>
    readonly usageIdeas: FieldRef<"herbalmedicine", 'String'>
  }
    

  // Custom InputTypes
  /**
   * herbalmedicine findUnique
   */
  export type herbalmedicineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * Filter, which herbalmedicine to fetch.
     */
    where: herbalmedicineWhereUniqueInput
  }

  /**
   * herbalmedicine findUniqueOrThrow
   */
  export type herbalmedicineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * Filter, which herbalmedicine to fetch.
     */
    where: herbalmedicineWhereUniqueInput
  }

  /**
   * herbalmedicine findFirst
   */
  export type herbalmedicineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * Filter, which herbalmedicine to fetch.
     */
    where?: herbalmedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of herbalmedicines to fetch.
     */
    orderBy?: herbalmedicineOrderByWithRelationInput | herbalmedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for herbalmedicines.
     */
    cursor?: herbalmedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` herbalmedicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` herbalmedicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of herbalmedicines.
     */
    distinct?: HerbalmedicineScalarFieldEnum | HerbalmedicineScalarFieldEnum[]
  }

  /**
   * herbalmedicine findFirstOrThrow
   */
  export type herbalmedicineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * Filter, which herbalmedicine to fetch.
     */
    where?: herbalmedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of herbalmedicines to fetch.
     */
    orderBy?: herbalmedicineOrderByWithRelationInput | herbalmedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for herbalmedicines.
     */
    cursor?: herbalmedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` herbalmedicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` herbalmedicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of herbalmedicines.
     */
    distinct?: HerbalmedicineScalarFieldEnum | HerbalmedicineScalarFieldEnum[]
  }

  /**
   * herbalmedicine findMany
   */
  export type herbalmedicineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * Filter, which herbalmedicines to fetch.
     */
    where?: herbalmedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of herbalmedicines to fetch.
     */
    orderBy?: herbalmedicineOrderByWithRelationInput | herbalmedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing herbalmedicines.
     */
    cursor?: herbalmedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` herbalmedicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` herbalmedicines.
     */
    skip?: number
    distinct?: HerbalmedicineScalarFieldEnum | HerbalmedicineScalarFieldEnum[]
  }

  /**
   * herbalmedicine create
   */
  export type herbalmedicineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * The data needed to create a herbalmedicine.
     */
    data: XOR<herbalmedicineCreateInput, herbalmedicineUncheckedCreateInput>
  }

  /**
   * herbalmedicine createMany
   */
  export type herbalmedicineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many herbalmedicines.
     */
    data: herbalmedicineCreateManyInput | herbalmedicineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * herbalmedicine update
   */
  export type herbalmedicineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * The data needed to update a herbalmedicine.
     */
    data: XOR<herbalmedicineUpdateInput, herbalmedicineUncheckedUpdateInput>
    /**
     * Choose, which herbalmedicine to update.
     */
    where: herbalmedicineWhereUniqueInput
  }

  /**
   * herbalmedicine updateMany
   */
  export type herbalmedicineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update herbalmedicines.
     */
    data: XOR<herbalmedicineUpdateManyMutationInput, herbalmedicineUncheckedUpdateManyInput>
    /**
     * Filter which herbalmedicines to update
     */
    where?: herbalmedicineWhereInput
    /**
     * Limit how many herbalmedicines to update.
     */
    limit?: number
  }

  /**
   * herbalmedicine upsert
   */
  export type herbalmedicineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * The filter to search for the herbalmedicine to update in case it exists.
     */
    where: herbalmedicineWhereUniqueInput
    /**
     * In case the herbalmedicine found by the `where` argument doesn't exist, create a new herbalmedicine with this data.
     */
    create: XOR<herbalmedicineCreateInput, herbalmedicineUncheckedCreateInput>
    /**
     * In case the herbalmedicine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<herbalmedicineUpdateInput, herbalmedicineUncheckedUpdateInput>
  }

  /**
   * herbalmedicine delete
   */
  export type herbalmedicineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
    /**
     * Filter which herbalmedicine to delete.
     */
    where: herbalmedicineWhereUniqueInput
  }

  /**
   * herbalmedicine deleteMany
   */
  export type herbalmedicineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which herbalmedicines to delete
     */
    where?: herbalmedicineWhereInput
    /**
     * Limit how many herbalmedicines to delete.
     */
    limit?: number
  }

  /**
   * herbalmedicine without action
   */
  export type herbalmedicineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the herbalmedicine
     */
    select?: herbalmedicineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the herbalmedicine
     */
    omit?: herbalmedicineOmit<ExtArgs> | null
  }


  /**
   * Model traditionalhealing
   */

  export type AggregateTraditionalhealing = {
    _count: TraditionalhealingCountAggregateOutputType | null
    _avg: TraditionalhealingAvgAggregateOutputType | null
    _sum: TraditionalhealingSumAggregateOutputType | null
    _min: TraditionalhealingMinAggregateOutputType | null
    _max: TraditionalhealingMaxAggregateOutputType | null
  }

  export type TraditionalhealingAvgAggregateOutputType = {
    id: number | null
    likes: number | null
    rating: number | null
  }

  export type TraditionalhealingSumAggregateOutputType = {
    id: number | null
    likes: number | null
    rating: number | null
  }

  export type TraditionalhealingMinAggregateOutputType = {
    id: number | null
    technique: string | null
    culture: string | null
    healingMethod: string | null
    createdAt: Date | null
    updatedAt: Date | null
    usageIdeas: string | null
    benefits: string | null
    description: string | null
    imageUrl: string | null
    likes: number | null
    rating: number | null
    region: string | null
    tags: string | null
  }

  export type TraditionalhealingMaxAggregateOutputType = {
    id: number | null
    technique: string | null
    culture: string | null
    healingMethod: string | null
    createdAt: Date | null
    updatedAt: Date | null
    usageIdeas: string | null
    benefits: string | null
    description: string | null
    imageUrl: string | null
    likes: number | null
    rating: number | null
    region: string | null
    tags: string | null
  }

  export type TraditionalhealingCountAggregateOutputType = {
    id: number
    technique: number
    culture: number
    healingMethod: number
    createdAt: number
    updatedAt: number
    usageIdeas: number
    benefits: number
    description: number
    imageUrl: number
    likes: number
    rating: number
    region: number
    tags: number
    _all: number
  }


  export type TraditionalhealingAvgAggregateInputType = {
    id?: true
    likes?: true
    rating?: true
  }

  export type TraditionalhealingSumAggregateInputType = {
    id?: true
    likes?: true
    rating?: true
  }

  export type TraditionalhealingMinAggregateInputType = {
    id?: true
    technique?: true
    culture?: true
    healingMethod?: true
    createdAt?: true
    updatedAt?: true
    usageIdeas?: true
    benefits?: true
    description?: true
    imageUrl?: true
    likes?: true
    rating?: true
    region?: true
    tags?: true
  }

  export type TraditionalhealingMaxAggregateInputType = {
    id?: true
    technique?: true
    culture?: true
    healingMethod?: true
    createdAt?: true
    updatedAt?: true
    usageIdeas?: true
    benefits?: true
    description?: true
    imageUrl?: true
    likes?: true
    rating?: true
    region?: true
    tags?: true
  }

  export type TraditionalhealingCountAggregateInputType = {
    id?: true
    technique?: true
    culture?: true
    healingMethod?: true
    createdAt?: true
    updatedAt?: true
    usageIdeas?: true
    benefits?: true
    description?: true
    imageUrl?: true
    likes?: true
    rating?: true
    region?: true
    tags?: true
    _all?: true
  }

  export type TraditionalhealingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which traditionalhealing to aggregate.
     */
    where?: traditionalhealingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traditionalhealings to fetch.
     */
    orderBy?: traditionalhealingOrderByWithRelationInput | traditionalhealingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: traditionalhealingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traditionalhealings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traditionalhealings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned traditionalhealings
    **/
    _count?: true | TraditionalhealingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TraditionalhealingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TraditionalhealingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TraditionalhealingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TraditionalhealingMaxAggregateInputType
  }

  export type GetTraditionalhealingAggregateType<T extends TraditionalhealingAggregateArgs> = {
        [P in keyof T & keyof AggregateTraditionalhealing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTraditionalhealing[P]>
      : GetScalarType<T[P], AggregateTraditionalhealing[P]>
  }




  export type traditionalhealingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: traditionalhealingWhereInput
    orderBy?: traditionalhealingOrderByWithAggregationInput | traditionalhealingOrderByWithAggregationInput[]
    by: TraditionalhealingScalarFieldEnum[] | TraditionalhealingScalarFieldEnum
    having?: traditionalhealingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TraditionalhealingCountAggregateInputType | true
    _avg?: TraditionalhealingAvgAggregateInputType
    _sum?: TraditionalhealingSumAggregateInputType
    _min?: TraditionalhealingMinAggregateInputType
    _max?: TraditionalhealingMaxAggregateInputType
  }

  export type TraditionalhealingGroupByOutputType = {
    id: number
    technique: string
    culture: string
    healingMethod: string
    createdAt: Date
    updatedAt: Date
    usageIdeas: string
    benefits: string
    description: string
    imageUrl: string
    likes: number
    rating: number | null
    region: string
    tags: string
    _count: TraditionalhealingCountAggregateOutputType | null
    _avg: TraditionalhealingAvgAggregateOutputType | null
    _sum: TraditionalhealingSumAggregateOutputType | null
    _min: TraditionalhealingMinAggregateOutputType | null
    _max: TraditionalhealingMaxAggregateOutputType | null
  }

  type GetTraditionalhealingGroupByPayload<T extends traditionalhealingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TraditionalhealingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TraditionalhealingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TraditionalhealingGroupByOutputType[P]>
            : GetScalarType<T[P], TraditionalhealingGroupByOutputType[P]>
        }
      >
    >


  export type traditionalhealingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    technique?: boolean
    culture?: boolean
    healingMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usageIdeas?: boolean
    benefits?: boolean
    description?: boolean
    imageUrl?: boolean
    likes?: boolean
    rating?: boolean
    region?: boolean
    tags?: boolean
  }, ExtArgs["result"]["traditionalhealing"]>



  export type traditionalhealingSelectScalar = {
    id?: boolean
    technique?: boolean
    culture?: boolean
    healingMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usageIdeas?: boolean
    benefits?: boolean
    description?: boolean
    imageUrl?: boolean
    likes?: boolean
    rating?: boolean
    region?: boolean
    tags?: boolean
  }

  export type traditionalhealingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "technique" | "culture" | "healingMethod" | "createdAt" | "updatedAt" | "usageIdeas" | "benefits" | "description" | "imageUrl" | "likes" | "rating" | "region" | "tags", ExtArgs["result"]["traditionalhealing"]>

  export type $traditionalhealingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "traditionalhealing"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      technique: string
      culture: string
      healingMethod: string
      createdAt: Date
      updatedAt: Date
      usageIdeas: string
      benefits: string
      description: string
      imageUrl: string
      likes: number
      rating: number | null
      region: string
      tags: string
    }, ExtArgs["result"]["traditionalhealing"]>
    composites: {}
  }

  type traditionalhealingGetPayload<S extends boolean | null | undefined | traditionalhealingDefaultArgs> = $Result.GetResult<Prisma.$traditionalhealingPayload, S>

  type traditionalhealingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<traditionalhealingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TraditionalhealingCountAggregateInputType | true
    }

  export interface traditionalhealingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['traditionalhealing'], meta: { name: 'traditionalhealing' } }
    /**
     * Find zero or one Traditionalhealing that matches the filter.
     * @param {traditionalhealingFindUniqueArgs} args - Arguments to find a Traditionalhealing
     * @example
     * // Get one Traditionalhealing
     * const traditionalhealing = await prisma.traditionalhealing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends traditionalhealingFindUniqueArgs>(args: SelectSubset<T, traditionalhealingFindUniqueArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Traditionalhealing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {traditionalhealingFindUniqueOrThrowArgs} args - Arguments to find a Traditionalhealing
     * @example
     * // Get one Traditionalhealing
     * const traditionalhealing = await prisma.traditionalhealing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends traditionalhealingFindUniqueOrThrowArgs>(args: SelectSubset<T, traditionalhealingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Traditionalhealing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {traditionalhealingFindFirstArgs} args - Arguments to find a Traditionalhealing
     * @example
     * // Get one Traditionalhealing
     * const traditionalhealing = await prisma.traditionalhealing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends traditionalhealingFindFirstArgs>(args?: SelectSubset<T, traditionalhealingFindFirstArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Traditionalhealing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {traditionalhealingFindFirstOrThrowArgs} args - Arguments to find a Traditionalhealing
     * @example
     * // Get one Traditionalhealing
     * const traditionalhealing = await prisma.traditionalhealing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends traditionalhealingFindFirstOrThrowArgs>(args?: SelectSubset<T, traditionalhealingFindFirstOrThrowArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Traditionalhealings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {traditionalhealingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Traditionalhealings
     * const traditionalhealings = await prisma.traditionalhealing.findMany()
     * 
     * // Get first 10 Traditionalhealings
     * const traditionalhealings = await prisma.traditionalhealing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const traditionalhealingWithIdOnly = await prisma.traditionalhealing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends traditionalhealingFindManyArgs>(args?: SelectSubset<T, traditionalhealingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Traditionalhealing.
     * @param {traditionalhealingCreateArgs} args - Arguments to create a Traditionalhealing.
     * @example
     * // Create one Traditionalhealing
     * const Traditionalhealing = await prisma.traditionalhealing.create({
     *   data: {
     *     // ... data to create a Traditionalhealing
     *   }
     * })
     * 
     */
    create<T extends traditionalhealingCreateArgs>(args: SelectSubset<T, traditionalhealingCreateArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Traditionalhealings.
     * @param {traditionalhealingCreateManyArgs} args - Arguments to create many Traditionalhealings.
     * @example
     * // Create many Traditionalhealings
     * const traditionalhealing = await prisma.traditionalhealing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends traditionalhealingCreateManyArgs>(args?: SelectSubset<T, traditionalhealingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Traditionalhealing.
     * @param {traditionalhealingDeleteArgs} args - Arguments to delete one Traditionalhealing.
     * @example
     * // Delete one Traditionalhealing
     * const Traditionalhealing = await prisma.traditionalhealing.delete({
     *   where: {
     *     // ... filter to delete one Traditionalhealing
     *   }
     * })
     * 
     */
    delete<T extends traditionalhealingDeleteArgs>(args: SelectSubset<T, traditionalhealingDeleteArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Traditionalhealing.
     * @param {traditionalhealingUpdateArgs} args - Arguments to update one Traditionalhealing.
     * @example
     * // Update one Traditionalhealing
     * const traditionalhealing = await prisma.traditionalhealing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends traditionalhealingUpdateArgs>(args: SelectSubset<T, traditionalhealingUpdateArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Traditionalhealings.
     * @param {traditionalhealingDeleteManyArgs} args - Arguments to filter Traditionalhealings to delete.
     * @example
     * // Delete a few Traditionalhealings
     * const { count } = await prisma.traditionalhealing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends traditionalhealingDeleteManyArgs>(args?: SelectSubset<T, traditionalhealingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Traditionalhealings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {traditionalhealingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Traditionalhealings
     * const traditionalhealing = await prisma.traditionalhealing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends traditionalhealingUpdateManyArgs>(args: SelectSubset<T, traditionalhealingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Traditionalhealing.
     * @param {traditionalhealingUpsertArgs} args - Arguments to update or create a Traditionalhealing.
     * @example
     * // Update or create a Traditionalhealing
     * const traditionalhealing = await prisma.traditionalhealing.upsert({
     *   create: {
     *     // ... data to create a Traditionalhealing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Traditionalhealing we want to update
     *   }
     * })
     */
    upsert<T extends traditionalhealingUpsertArgs>(args: SelectSubset<T, traditionalhealingUpsertArgs<ExtArgs>>): Prisma__traditionalhealingClient<$Result.GetResult<Prisma.$traditionalhealingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Traditionalhealings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {traditionalhealingCountArgs} args - Arguments to filter Traditionalhealings to count.
     * @example
     * // Count the number of Traditionalhealings
     * const count = await prisma.traditionalhealing.count({
     *   where: {
     *     // ... the filter for the Traditionalhealings we want to count
     *   }
     * })
    **/
    count<T extends traditionalhealingCountArgs>(
      args?: Subset<T, traditionalhealingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TraditionalhealingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Traditionalhealing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TraditionalhealingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TraditionalhealingAggregateArgs>(args: Subset<T, TraditionalhealingAggregateArgs>): Prisma.PrismaPromise<GetTraditionalhealingAggregateType<T>>

    /**
     * Group by Traditionalhealing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {traditionalhealingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends traditionalhealingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: traditionalhealingGroupByArgs['orderBy'] }
        : { orderBy?: traditionalhealingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, traditionalhealingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTraditionalhealingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the traditionalhealing model
   */
  readonly fields: traditionalhealingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for traditionalhealing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__traditionalhealingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the traditionalhealing model
   */
  interface traditionalhealingFieldRefs {
    readonly id: FieldRef<"traditionalhealing", 'Int'>
    readonly technique: FieldRef<"traditionalhealing", 'String'>
    readonly culture: FieldRef<"traditionalhealing", 'String'>
    readonly healingMethod: FieldRef<"traditionalhealing", 'String'>
    readonly createdAt: FieldRef<"traditionalhealing", 'DateTime'>
    readonly updatedAt: FieldRef<"traditionalhealing", 'DateTime'>
    readonly usageIdeas: FieldRef<"traditionalhealing", 'String'>
    readonly benefits: FieldRef<"traditionalhealing", 'String'>
    readonly description: FieldRef<"traditionalhealing", 'String'>
    readonly imageUrl: FieldRef<"traditionalhealing", 'String'>
    readonly likes: FieldRef<"traditionalhealing", 'Int'>
    readonly rating: FieldRef<"traditionalhealing", 'Float'>
    readonly region: FieldRef<"traditionalhealing", 'String'>
    readonly tags: FieldRef<"traditionalhealing", 'String'>
  }
    

  // Custom InputTypes
  /**
   * traditionalhealing findUnique
   */
  export type traditionalhealingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * Filter, which traditionalhealing to fetch.
     */
    where: traditionalhealingWhereUniqueInput
  }

  /**
   * traditionalhealing findUniqueOrThrow
   */
  export type traditionalhealingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * Filter, which traditionalhealing to fetch.
     */
    where: traditionalhealingWhereUniqueInput
  }

  /**
   * traditionalhealing findFirst
   */
  export type traditionalhealingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * Filter, which traditionalhealing to fetch.
     */
    where?: traditionalhealingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traditionalhealings to fetch.
     */
    orderBy?: traditionalhealingOrderByWithRelationInput | traditionalhealingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for traditionalhealings.
     */
    cursor?: traditionalhealingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traditionalhealings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traditionalhealings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of traditionalhealings.
     */
    distinct?: TraditionalhealingScalarFieldEnum | TraditionalhealingScalarFieldEnum[]
  }

  /**
   * traditionalhealing findFirstOrThrow
   */
  export type traditionalhealingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * Filter, which traditionalhealing to fetch.
     */
    where?: traditionalhealingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traditionalhealings to fetch.
     */
    orderBy?: traditionalhealingOrderByWithRelationInput | traditionalhealingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for traditionalhealings.
     */
    cursor?: traditionalhealingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traditionalhealings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traditionalhealings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of traditionalhealings.
     */
    distinct?: TraditionalhealingScalarFieldEnum | TraditionalhealingScalarFieldEnum[]
  }

  /**
   * traditionalhealing findMany
   */
  export type traditionalhealingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * Filter, which traditionalhealings to fetch.
     */
    where?: traditionalhealingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of traditionalhealings to fetch.
     */
    orderBy?: traditionalhealingOrderByWithRelationInput | traditionalhealingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing traditionalhealings.
     */
    cursor?: traditionalhealingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` traditionalhealings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` traditionalhealings.
     */
    skip?: number
    distinct?: TraditionalhealingScalarFieldEnum | TraditionalhealingScalarFieldEnum[]
  }

  /**
   * traditionalhealing create
   */
  export type traditionalhealingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * The data needed to create a traditionalhealing.
     */
    data: XOR<traditionalhealingCreateInput, traditionalhealingUncheckedCreateInput>
  }

  /**
   * traditionalhealing createMany
   */
  export type traditionalhealingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many traditionalhealings.
     */
    data: traditionalhealingCreateManyInput | traditionalhealingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * traditionalhealing update
   */
  export type traditionalhealingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * The data needed to update a traditionalhealing.
     */
    data: XOR<traditionalhealingUpdateInput, traditionalhealingUncheckedUpdateInput>
    /**
     * Choose, which traditionalhealing to update.
     */
    where: traditionalhealingWhereUniqueInput
  }

  /**
   * traditionalhealing updateMany
   */
  export type traditionalhealingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update traditionalhealings.
     */
    data: XOR<traditionalhealingUpdateManyMutationInput, traditionalhealingUncheckedUpdateManyInput>
    /**
     * Filter which traditionalhealings to update
     */
    where?: traditionalhealingWhereInput
    /**
     * Limit how many traditionalhealings to update.
     */
    limit?: number
  }

  /**
   * traditionalhealing upsert
   */
  export type traditionalhealingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * The filter to search for the traditionalhealing to update in case it exists.
     */
    where: traditionalhealingWhereUniqueInput
    /**
     * In case the traditionalhealing found by the `where` argument doesn't exist, create a new traditionalhealing with this data.
     */
    create: XOR<traditionalhealingCreateInput, traditionalhealingUncheckedCreateInput>
    /**
     * In case the traditionalhealing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<traditionalhealingUpdateInput, traditionalhealingUncheckedUpdateInput>
  }

  /**
   * traditionalhealing delete
   */
  export type traditionalhealingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
    /**
     * Filter which traditionalhealing to delete.
     */
    where: traditionalhealingWhereUniqueInput
  }

  /**
   * traditionalhealing deleteMany
   */
  export type traditionalhealingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which traditionalhealings to delete
     */
    where?: traditionalhealingWhereInput
    /**
     * Limit how many traditionalhealings to delete.
     */
    limit?: number
  }

  /**
   * traditionalhealing without action
   */
  export type traditionalhealingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the traditionalhealing
     */
    select?: traditionalhealingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the traditionalhealing
     */
    omit?: traditionalhealingOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AromatherapyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    essentialOil: 'essentialOil',
    uses: 'uses',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    benefits: 'benefits',
    category: 'category',
    description: 'description',
    imageUrl: 'imageUrl',
    likes: 'likes',
    origin: 'origin',
    rating: 'rating',
    symptoms: 'symptoms',
    tags: 'tags',
    usageIdeas: 'usageIdeas'
  };

  export type AromatherapyScalarFieldEnum = (typeof AromatherapyScalarFieldEnum)[keyof typeof AromatherapyScalarFieldEnum]


  export const HerbalmedicineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    benefits: 'benefits',
    origin: 'origin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    category: 'category',
    imageUrl: 'imageUrl',
    likes: 'likes',
    rating: 'rating',
    symptoms: 'symptoms',
    tags: 'tags',
    usageIdeas: 'usageIdeas'
  };

  export type HerbalmedicineScalarFieldEnum = (typeof HerbalmedicineScalarFieldEnum)[keyof typeof HerbalmedicineScalarFieldEnum]


  export const TraditionalhealingScalarFieldEnum: {
    id: 'id',
    technique: 'technique',
    culture: 'culture',
    healingMethod: 'healingMethod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    usageIdeas: 'usageIdeas',
    benefits: 'benefits',
    description: 'description',
    imageUrl: 'imageUrl',
    likes: 'likes',
    rating: 'rating',
    region: 'region',
    tags: 'tags'
  };

  export type TraditionalhealingScalarFieldEnum = (typeof TraditionalhealingScalarFieldEnum)[keyof typeof TraditionalhealingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const aromatherapyOrderByRelevanceFieldEnum: {
    name: 'name',
    essentialOil: 'essentialOil',
    uses: 'uses',
    benefits: 'benefits',
    category: 'category',
    description: 'description',
    imageUrl: 'imageUrl',
    origin: 'origin',
    symptoms: 'symptoms',
    tags: 'tags',
    usageIdeas: 'usageIdeas'
  };

  export type aromatherapyOrderByRelevanceFieldEnum = (typeof aromatherapyOrderByRelevanceFieldEnum)[keyof typeof aromatherapyOrderByRelevanceFieldEnum]


  export const herbalmedicineOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    benefits: 'benefits',
    origin: 'origin',
    category: 'category',
    imageUrl: 'imageUrl',
    symptoms: 'symptoms',
    tags: 'tags',
    usageIdeas: 'usageIdeas'
  };

  export type herbalmedicineOrderByRelevanceFieldEnum = (typeof herbalmedicineOrderByRelevanceFieldEnum)[keyof typeof herbalmedicineOrderByRelevanceFieldEnum]


  export const traditionalhealingOrderByRelevanceFieldEnum: {
    technique: 'technique',
    culture: 'culture',
    healingMethod: 'healingMethod',
    usageIdeas: 'usageIdeas',
    benefits: 'benefits',
    description: 'description',
    imageUrl: 'imageUrl',
    region: 'region',
    tags: 'tags'
  };

  export type traditionalhealingOrderByRelevanceFieldEnum = (typeof traditionalhealingOrderByRelevanceFieldEnum)[keyof typeof traditionalhealingOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type aromatherapyWhereInput = {
    AND?: aromatherapyWhereInput | aromatherapyWhereInput[]
    OR?: aromatherapyWhereInput[]
    NOT?: aromatherapyWhereInput | aromatherapyWhereInput[]
    id?: IntFilter<"aromatherapy"> | number
    name?: StringFilter<"aromatherapy"> | string
    essentialOil?: StringFilter<"aromatherapy"> | string
    uses?: StringFilter<"aromatherapy"> | string
    createdAt?: DateTimeFilter<"aromatherapy"> | Date | string
    updatedAt?: DateTimeFilter<"aromatherapy"> | Date | string
    benefits?: StringFilter<"aromatherapy"> | string
    category?: StringFilter<"aromatherapy"> | string
    description?: StringFilter<"aromatherapy"> | string
    imageUrl?: StringFilter<"aromatherapy"> | string
    likes?: IntFilter<"aromatherapy"> | number
    origin?: StringFilter<"aromatherapy"> | string
    rating?: FloatNullableFilter<"aromatherapy"> | number | null
    symptoms?: StringFilter<"aromatherapy"> | string
    tags?: StringFilter<"aromatherapy"> | string
    usageIdeas?: StringFilter<"aromatherapy"> | string
  }

  export type aromatherapyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    essentialOil?: SortOrder
    uses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    benefits?: SortOrder
    category?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    origin?: SortOrder
    rating?: SortOrderInput | SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
    _relevance?: aromatherapyOrderByRelevanceInput
  }

  export type aromatherapyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: aromatherapyWhereInput | aromatherapyWhereInput[]
    OR?: aromatherapyWhereInput[]
    NOT?: aromatherapyWhereInput | aromatherapyWhereInput[]
    essentialOil?: StringFilter<"aromatherapy"> | string
    uses?: StringFilter<"aromatherapy"> | string
    createdAt?: DateTimeFilter<"aromatherapy"> | Date | string
    updatedAt?: DateTimeFilter<"aromatherapy"> | Date | string
    benefits?: StringFilter<"aromatherapy"> | string
    category?: StringFilter<"aromatherapy"> | string
    description?: StringFilter<"aromatherapy"> | string
    imageUrl?: StringFilter<"aromatherapy"> | string
    likes?: IntFilter<"aromatherapy"> | number
    origin?: StringFilter<"aromatherapy"> | string
    rating?: FloatNullableFilter<"aromatherapy"> | number | null
    symptoms?: StringFilter<"aromatherapy"> | string
    tags?: StringFilter<"aromatherapy"> | string
    usageIdeas?: StringFilter<"aromatherapy"> | string
  }, "id" | "name">

  export type aromatherapyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    essentialOil?: SortOrder
    uses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    benefits?: SortOrder
    category?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    origin?: SortOrder
    rating?: SortOrderInput | SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
    _count?: aromatherapyCountOrderByAggregateInput
    _avg?: aromatherapyAvgOrderByAggregateInput
    _max?: aromatherapyMaxOrderByAggregateInput
    _min?: aromatherapyMinOrderByAggregateInput
    _sum?: aromatherapySumOrderByAggregateInput
  }

  export type aromatherapyScalarWhereWithAggregatesInput = {
    AND?: aromatherapyScalarWhereWithAggregatesInput | aromatherapyScalarWhereWithAggregatesInput[]
    OR?: aromatherapyScalarWhereWithAggregatesInput[]
    NOT?: aromatherapyScalarWhereWithAggregatesInput | aromatherapyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"aromatherapy"> | number
    name?: StringWithAggregatesFilter<"aromatherapy"> | string
    essentialOil?: StringWithAggregatesFilter<"aromatherapy"> | string
    uses?: StringWithAggregatesFilter<"aromatherapy"> | string
    createdAt?: DateTimeWithAggregatesFilter<"aromatherapy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"aromatherapy"> | Date | string
    benefits?: StringWithAggregatesFilter<"aromatherapy"> | string
    category?: StringWithAggregatesFilter<"aromatherapy"> | string
    description?: StringWithAggregatesFilter<"aromatherapy"> | string
    imageUrl?: StringWithAggregatesFilter<"aromatherapy"> | string
    likes?: IntWithAggregatesFilter<"aromatherapy"> | number
    origin?: StringWithAggregatesFilter<"aromatherapy"> | string
    rating?: FloatNullableWithAggregatesFilter<"aromatherapy"> | number | null
    symptoms?: StringWithAggregatesFilter<"aromatherapy"> | string
    tags?: StringWithAggregatesFilter<"aromatherapy"> | string
    usageIdeas?: StringWithAggregatesFilter<"aromatherapy"> | string
  }

  export type herbalmedicineWhereInput = {
    AND?: herbalmedicineWhereInput | herbalmedicineWhereInput[]
    OR?: herbalmedicineWhereInput[]
    NOT?: herbalmedicineWhereInput | herbalmedicineWhereInput[]
    id?: IntFilter<"herbalmedicine"> | number
    name?: StringFilter<"herbalmedicine"> | string
    description?: StringFilter<"herbalmedicine"> | string
    benefits?: StringFilter<"herbalmedicine"> | string
    origin?: StringFilter<"herbalmedicine"> | string
    createdAt?: DateTimeFilter<"herbalmedicine"> | Date | string
    updatedAt?: DateTimeFilter<"herbalmedicine"> | Date | string
    category?: StringFilter<"herbalmedicine"> | string
    imageUrl?: StringFilter<"herbalmedicine"> | string
    likes?: IntFilter<"herbalmedicine"> | number
    rating?: FloatNullableFilter<"herbalmedicine"> | number | null
    symptoms?: StringFilter<"herbalmedicine"> | string
    tags?: StringFilter<"herbalmedicine"> | string
    usageIdeas?: StringFilter<"herbalmedicine"> | string
  }

  export type herbalmedicineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    benefits?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrderInput | SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
    _relevance?: herbalmedicineOrderByRelevanceInput
  }

  export type herbalmedicineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: herbalmedicineWhereInput | herbalmedicineWhereInput[]
    OR?: herbalmedicineWhereInput[]
    NOT?: herbalmedicineWhereInput | herbalmedicineWhereInput[]
    description?: StringFilter<"herbalmedicine"> | string
    benefits?: StringFilter<"herbalmedicine"> | string
    origin?: StringFilter<"herbalmedicine"> | string
    createdAt?: DateTimeFilter<"herbalmedicine"> | Date | string
    updatedAt?: DateTimeFilter<"herbalmedicine"> | Date | string
    category?: StringFilter<"herbalmedicine"> | string
    imageUrl?: StringFilter<"herbalmedicine"> | string
    likes?: IntFilter<"herbalmedicine"> | number
    rating?: FloatNullableFilter<"herbalmedicine"> | number | null
    symptoms?: StringFilter<"herbalmedicine"> | string
    tags?: StringFilter<"herbalmedicine"> | string
    usageIdeas?: StringFilter<"herbalmedicine"> | string
  }, "id" | "name">

  export type herbalmedicineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    benefits?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrderInput | SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
    _count?: herbalmedicineCountOrderByAggregateInput
    _avg?: herbalmedicineAvgOrderByAggregateInput
    _max?: herbalmedicineMaxOrderByAggregateInput
    _min?: herbalmedicineMinOrderByAggregateInput
    _sum?: herbalmedicineSumOrderByAggregateInput
  }

  export type herbalmedicineScalarWhereWithAggregatesInput = {
    AND?: herbalmedicineScalarWhereWithAggregatesInput | herbalmedicineScalarWhereWithAggregatesInput[]
    OR?: herbalmedicineScalarWhereWithAggregatesInput[]
    NOT?: herbalmedicineScalarWhereWithAggregatesInput | herbalmedicineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"herbalmedicine"> | number
    name?: StringWithAggregatesFilter<"herbalmedicine"> | string
    description?: StringWithAggregatesFilter<"herbalmedicine"> | string
    benefits?: StringWithAggregatesFilter<"herbalmedicine"> | string
    origin?: StringWithAggregatesFilter<"herbalmedicine"> | string
    createdAt?: DateTimeWithAggregatesFilter<"herbalmedicine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"herbalmedicine"> | Date | string
    category?: StringWithAggregatesFilter<"herbalmedicine"> | string
    imageUrl?: StringWithAggregatesFilter<"herbalmedicine"> | string
    likes?: IntWithAggregatesFilter<"herbalmedicine"> | number
    rating?: FloatNullableWithAggregatesFilter<"herbalmedicine"> | number | null
    symptoms?: StringWithAggregatesFilter<"herbalmedicine"> | string
    tags?: StringWithAggregatesFilter<"herbalmedicine"> | string
    usageIdeas?: StringWithAggregatesFilter<"herbalmedicine"> | string
  }

  export type traditionalhealingWhereInput = {
    AND?: traditionalhealingWhereInput | traditionalhealingWhereInput[]
    OR?: traditionalhealingWhereInput[]
    NOT?: traditionalhealingWhereInput | traditionalhealingWhereInput[]
    id?: IntFilter<"traditionalhealing"> | number
    technique?: StringFilter<"traditionalhealing"> | string
    culture?: StringFilter<"traditionalhealing"> | string
    healingMethod?: StringFilter<"traditionalhealing"> | string
    createdAt?: DateTimeFilter<"traditionalhealing"> | Date | string
    updatedAt?: DateTimeFilter<"traditionalhealing"> | Date | string
    usageIdeas?: StringFilter<"traditionalhealing"> | string
    benefits?: StringFilter<"traditionalhealing"> | string
    description?: StringFilter<"traditionalhealing"> | string
    imageUrl?: StringFilter<"traditionalhealing"> | string
    likes?: IntFilter<"traditionalhealing"> | number
    rating?: FloatNullableFilter<"traditionalhealing"> | number | null
    region?: StringFilter<"traditionalhealing"> | string
    tags?: StringFilter<"traditionalhealing"> | string
  }

  export type traditionalhealingOrderByWithRelationInput = {
    id?: SortOrder
    technique?: SortOrder
    culture?: SortOrder
    healingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usageIdeas?: SortOrder
    benefits?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrderInput | SortOrder
    region?: SortOrder
    tags?: SortOrder
    _relevance?: traditionalhealingOrderByRelevanceInput
  }

  export type traditionalhealingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    technique?: string
    AND?: traditionalhealingWhereInput | traditionalhealingWhereInput[]
    OR?: traditionalhealingWhereInput[]
    NOT?: traditionalhealingWhereInput | traditionalhealingWhereInput[]
    culture?: StringFilter<"traditionalhealing"> | string
    healingMethod?: StringFilter<"traditionalhealing"> | string
    createdAt?: DateTimeFilter<"traditionalhealing"> | Date | string
    updatedAt?: DateTimeFilter<"traditionalhealing"> | Date | string
    usageIdeas?: StringFilter<"traditionalhealing"> | string
    benefits?: StringFilter<"traditionalhealing"> | string
    description?: StringFilter<"traditionalhealing"> | string
    imageUrl?: StringFilter<"traditionalhealing"> | string
    likes?: IntFilter<"traditionalhealing"> | number
    rating?: FloatNullableFilter<"traditionalhealing"> | number | null
    region?: StringFilter<"traditionalhealing"> | string
    tags?: StringFilter<"traditionalhealing"> | string
  }, "id" | "technique">

  export type traditionalhealingOrderByWithAggregationInput = {
    id?: SortOrder
    technique?: SortOrder
    culture?: SortOrder
    healingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usageIdeas?: SortOrder
    benefits?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrderInput | SortOrder
    region?: SortOrder
    tags?: SortOrder
    _count?: traditionalhealingCountOrderByAggregateInput
    _avg?: traditionalhealingAvgOrderByAggregateInput
    _max?: traditionalhealingMaxOrderByAggregateInput
    _min?: traditionalhealingMinOrderByAggregateInput
    _sum?: traditionalhealingSumOrderByAggregateInput
  }

  export type traditionalhealingScalarWhereWithAggregatesInput = {
    AND?: traditionalhealingScalarWhereWithAggregatesInput | traditionalhealingScalarWhereWithAggregatesInput[]
    OR?: traditionalhealingScalarWhereWithAggregatesInput[]
    NOT?: traditionalhealingScalarWhereWithAggregatesInput | traditionalhealingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"traditionalhealing"> | number
    technique?: StringWithAggregatesFilter<"traditionalhealing"> | string
    culture?: StringWithAggregatesFilter<"traditionalhealing"> | string
    healingMethod?: StringWithAggregatesFilter<"traditionalhealing"> | string
    createdAt?: DateTimeWithAggregatesFilter<"traditionalhealing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"traditionalhealing"> | Date | string
    usageIdeas?: StringWithAggregatesFilter<"traditionalhealing"> | string
    benefits?: StringWithAggregatesFilter<"traditionalhealing"> | string
    description?: StringWithAggregatesFilter<"traditionalhealing"> | string
    imageUrl?: StringWithAggregatesFilter<"traditionalhealing"> | string
    likes?: IntWithAggregatesFilter<"traditionalhealing"> | number
    rating?: FloatNullableWithAggregatesFilter<"traditionalhealing"> | number | null
    region?: StringWithAggregatesFilter<"traditionalhealing"> | string
    tags?: StringWithAggregatesFilter<"traditionalhealing"> | string
  }

  export type aromatherapyCreateInput = {
    name: string
    essentialOil: string
    uses: string
    createdAt?: Date | string
    updatedAt?: Date | string
    benefits: string
    category: string
    description: string
    imageUrl: string
    likes?: number
    origin: string
    rating?: number | null
    symptoms: string
    tags: string
    usageIdeas: string
  }

  export type aromatherapyUncheckedCreateInput = {
    id?: number
    name: string
    essentialOil: string
    uses: string
    createdAt?: Date | string
    updatedAt?: Date | string
    benefits: string
    category: string
    description: string
    imageUrl: string
    likes?: number
    origin: string
    rating?: number | null
    symptoms: string
    tags: string
    usageIdeas: string
  }

  export type aromatherapyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    essentialOil?: StringFieldUpdateOperationsInput | string
    uses?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benefits?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    origin?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type aromatherapyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    essentialOil?: StringFieldUpdateOperationsInput | string
    uses?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benefits?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    origin?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type aromatherapyCreateManyInput = {
    id?: number
    name: string
    essentialOil: string
    uses: string
    createdAt?: Date | string
    updatedAt?: Date | string
    benefits: string
    category: string
    description: string
    imageUrl: string
    likes?: number
    origin: string
    rating?: number | null
    symptoms: string
    tags: string
    usageIdeas: string
  }

  export type aromatherapyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    essentialOil?: StringFieldUpdateOperationsInput | string
    uses?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benefits?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    origin?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type aromatherapyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    essentialOil?: StringFieldUpdateOperationsInput | string
    uses?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benefits?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    origin?: StringFieldUpdateOperationsInput | string
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type herbalmedicineCreateInput = {
    name: string
    description: string
    benefits: string
    origin: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: string
    imageUrl: string
    likes?: number
    rating?: number | null
    symptoms: string
    tags: string
    usageIdeas: string
  }

  export type herbalmedicineUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    benefits: string
    origin: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: string
    imageUrl: string
    likes?: number
    rating?: number | null
    symptoms: string
    tags: string
    usageIdeas: string
  }

  export type herbalmedicineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type herbalmedicineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type herbalmedicineCreateManyInput = {
    id?: number
    name: string
    description: string
    benefits: string
    origin: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: string
    imageUrl: string
    likes?: number
    rating?: number | null
    symptoms: string
    tags: string
    usageIdeas: string
  }

  export type herbalmedicineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type herbalmedicineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    origin?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    symptoms?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
  }

  export type traditionalhealingCreateInput = {
    technique: string
    culture: string
    healingMethod: string
    createdAt?: Date | string
    updatedAt?: Date | string
    usageIdeas: string
    benefits: string
    description: string
    imageUrl: string
    likes?: number
    rating?: number | null
    region: string
    tags: string
  }

  export type traditionalhealingUncheckedCreateInput = {
    id?: number
    technique: string
    culture: string
    healingMethod: string
    createdAt?: Date | string
    updatedAt?: Date | string
    usageIdeas: string
    benefits: string
    description: string
    imageUrl: string
    likes?: number
    rating?: number | null
    region: string
    tags: string
  }

  export type traditionalhealingUpdateInput = {
    technique?: StringFieldUpdateOperationsInput | string
    culture?: StringFieldUpdateOperationsInput | string
    healingMethod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    region?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type traditionalhealingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    technique?: StringFieldUpdateOperationsInput | string
    culture?: StringFieldUpdateOperationsInput | string
    healingMethod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    region?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type traditionalhealingCreateManyInput = {
    id?: number
    technique: string
    culture: string
    healingMethod: string
    createdAt?: Date | string
    updatedAt?: Date | string
    usageIdeas: string
    benefits: string
    description: string
    imageUrl: string
    likes?: number
    rating?: number | null
    region: string
    tags: string
  }

  export type traditionalhealingUpdateManyMutationInput = {
    technique?: StringFieldUpdateOperationsInput | string
    culture?: StringFieldUpdateOperationsInput | string
    healingMethod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    region?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type traditionalhealingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    technique?: StringFieldUpdateOperationsInput | string
    culture?: StringFieldUpdateOperationsInput | string
    healingMethod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageIdeas?: StringFieldUpdateOperationsInput | string
    benefits?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    region?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type aromatherapyOrderByRelevanceInput = {
    fields: aromatherapyOrderByRelevanceFieldEnum | aromatherapyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type aromatherapyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    essentialOil?: SortOrder
    uses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    benefits?: SortOrder
    category?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    origin?: SortOrder
    rating?: SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
  }

  export type aromatherapyAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
  }

  export type aromatherapyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    essentialOil?: SortOrder
    uses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    benefits?: SortOrder
    category?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    origin?: SortOrder
    rating?: SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
  }

  export type aromatherapyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    essentialOil?: SortOrder
    uses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    benefits?: SortOrder
    category?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    origin?: SortOrder
    rating?: SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
  }

  export type aromatherapySumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type herbalmedicineOrderByRelevanceInput = {
    fields: herbalmedicineOrderByRelevanceFieldEnum | herbalmedicineOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type herbalmedicineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    benefits?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
  }

  export type herbalmedicineAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
  }

  export type herbalmedicineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    benefits?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
  }

  export type herbalmedicineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    benefits?: SortOrder
    origin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
    symptoms?: SortOrder
    tags?: SortOrder
    usageIdeas?: SortOrder
  }

  export type herbalmedicineSumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
  }

  export type traditionalhealingOrderByRelevanceInput = {
    fields: traditionalhealingOrderByRelevanceFieldEnum | traditionalhealingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type traditionalhealingCountOrderByAggregateInput = {
    id?: SortOrder
    technique?: SortOrder
    culture?: SortOrder
    healingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usageIdeas?: SortOrder
    benefits?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
    region?: SortOrder
    tags?: SortOrder
  }

  export type traditionalhealingAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
  }

  export type traditionalhealingMaxOrderByAggregateInput = {
    id?: SortOrder
    technique?: SortOrder
    culture?: SortOrder
    healingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usageIdeas?: SortOrder
    benefits?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
    region?: SortOrder
    tags?: SortOrder
  }

  export type traditionalhealingMinOrderByAggregateInput = {
    id?: SortOrder
    technique?: SortOrder
    culture?: SortOrder
    healingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usageIdeas?: SortOrder
    benefits?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
    region?: SortOrder
    tags?: SortOrder
  }

  export type traditionalhealingSumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    rating?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}